[t:template,n:base_goblin_good_ut]
{
  category_name = "1W_character";
  doc = "goblin good";
  specializes = hero;
  [actor]
  {
    //portrait_icon = b_gui_ig_i_ic_c_sk_g;
    portrait_icon = b_gui_ig_i_ic_c_goblin;
  }
  [aspect]
  {
		life_recovery_unit   = 1;
		life_recovery_period = 4;

		mana_recovery_unit   = 2;
		mana_recovery_period = 3;
    model = m_c_eam_ggt_pos_1;
    material = flesh;
    [voice]
    {
      [die]     { * = s_e_die_copter; }
    }
  }
  [body]
  {
    armor_version = eam_ggt;
    //min_move_velocity = 1.8;
    //avg_move_velocity = 2.7;
//    min_move_velocity = 2.7;
    avg_move_velocity = 4.5;
    initial_chore = chore_fidget;
    [bone_translator]
    {
      body_anterior = Bip01_Head;
      body_mid = Bip01_Spine;
      body_posterior = Bip01_Pelvis;
      kill_bone = Bip01_Spine;
      shield_bone = shield_grip;
      weapon_bone = weapon_grip;
    }
    [chore_dictionary]
    {
      chore_prefix = a_c_eam_ggt_fs;
      [chore_attack]
      {
        chore_stances = 0,1,2,3,4,5,6,7;
        skrit = select_attack;
        [anim_files] 
        { 
          00=at; 
          01=at-02;
        }
      }
      [chore_default]
      {
        chore_stances = 1,2,3,4,5,7;
        skrit = infinite_loop;
        [anim_files] { 00=dfs; }
      }
      [chore_die]
      {
        chore_stances = 1;
        skrit = select_transition;
        [anim_files] { 00=di; }
      }
      [chore_fidget]
      {
        chore_stances = 0,1,2,3,4,5,6,7;
        skrit = select_fidget;
        [anim_files] { 00=dff; }
      }
      [chore_misc]
      {
        chore_stances = ignore;
        skrit = select_transition;
        [anim_files]
        {
          froz = a_c_eam_ggt_fs1_ds;
          frtd = a_c_eam_ggt_fs1_frtd;
          drnk = a_c_eam_ggt_fs1_dk;
          gtup = a_c_eam_ggt_fs0_up;
        }
      }
      [chore_walk]
      {
        chore_stances = 0,1,2,3,4,5,6,7;
        skrit = select_walk;
        [anim_files] { 00=wl; }
      }
      [chore_magic]
      {
        chore_stances = 0,5;
        skrit = select_attack;
        //skrit = select_transition; //seems to fix the cycling problem of the spell casting??
        [anim_files]
        {
          00 = mg;
          01 = mg-02;
        }     
      }     
    }
    /*[weapon_scales]
    {
      as_minigun      = 0.8, 0.8, 0.8;
    }*/
  }
  [common]
  {
    screen_name="Goblin";
  }
  [mind]
  {
  }
  [physics]
  {
    explode_when_killed = false;
    explosion_magnitude = 1.0;
    gib_gore_good = true;
    [break_particulate]
    {
      frag_glb_gobbot_01 = 1;
      frag_glb_gobbot_02 = 2;
      frag_glb_gobbot_03 = 3;
      frag_glb_gobbot_04 = 2;
      frag_glb_gobbot_05 = 1;
      frag_glb_gobbot_06 = 3;
      frag_glb_gobbot_07 = 1;
    }
  }
  [water_effects] {}
}

[t:template,n:ut_goblin_good]
{
  doc = "goblin good";
  specializes = base_goblin_good_ut;
  
  [actor]
  {
    [skills]
    {
		dexterity 		= 5.44, 0, 10;
		intelligence 		= 22.4, 0, 10;
		strength 		= 4.16, 0, 10;
		combat_magic 		= 32, 0, 0;
            	uber 			= 32, 0, 0;
    }
  }

  [aspect]{}

  [attack]
  {
    ammo_attach_bone = weapon_grip;
    attack_range = 0.5;
    reload_delay = 0;
    damage_max = 0;
    damage_min = 0;   
  }
  
  [common]
  {
    screen_name = "Tikklan";
  }
	[conversation]
	{
	}
  [inventory]
  {
		spew_equipped_kill_count = <ignore>;
    [equipment]
    {
	es_chest = bd_le_m_g_c_avg_mech_dsx;
	es_spellbook = book_glb_magic_01;
        es_feet = bo_bo_sc_m_g_c_avg_geared_dsx;
    }
        [other]
        {
		il_spell_1 = spell_fire_wall;
	        il_main = st_g_c_dsx_bar_avg;
			il_main = book_glb_lore_ut_tikklan;
 	}
  }

	[mind]
	{
		actor_weapon_preference         	= WP_MAGIC;
		combat_orders                           = CO_FREE;
		movement_orders                         = MO_FREE;
		actor_auto_switches_to_magic            = true;
		actor_auto_defends_others               = true;
		actor_auto_heals_others_life            = true;
		actor_auto_heals_self_life              = false;
		actor_auto_reanimates_friends           = true;
	}
	[store] { can_sell_self = true; }
}