/*
  ============================================================================
  ----------------------------------------------------------------------------

	File		: 	job_talk_kavaren.skrit

	Author(s)	: 	David Tomandl, Eric Tams, Chad Queen, Bartosz Kijanka

	Purpose		: 	Custom talk job for Kavaren, another multiplayer world quest guy.

	(C)opyright 2001 Gas Powered Games, Inc.

  ----------------------------------------------------------------------------
  ============================================================================
*/

Go		m_Go$;
GoMind	m_Mind$;
GoBody  m_Body$;
Job		m_Job$;
Goid	m_Target$;

#include "k_job_c_mcp_fidget_utils"
#include "k_job_c_talk_utils"

give_item$( goid target$ )
{
	// Find all of the objects nearby.
	AIQuery.TempGopColl1.Clear;
	AIQuery.GetOccupantsInSphere( target$.Go.Placement.Position, 10, AIQuery.TempGopColl1 );

	// sort through the list of objects looking for items. 
	AIQuery.TempGopColl2.Clear;
	AIQuery.Get( target$.Go, QT_ITEM, AIQuery.TempGopColl1, AIQuery.TempGopColl2 );
	
	int i$ = 0;
	int iend$ = AIQuery.TempGopColl2.Size();
	bool found_item$ = false;
	
	// itterate over the entire list of item.
	while( i$ < iend$ )
	{
		Go temp_target$ = AIQuery.TempGopColl2.Get( i$ );
		if( temp_target$ != NULL )
		{
			// try to find the stone
			if( StringTool.SameNoCase( temp_target$.Templatename, "tenstone_glb" ) )
			{
				found_item$ = true;
				break;
			}
		}	
		i$ += 1;
	}
	if( !found_item$ )
	{
		// see if the person we are tying to reward alread has the object in his inventory.
		Go ring$ = m_Target$.Go.Inventory.GetItemFromTemplate( "tenstone_glb" );
		if( ring$ != null )
		{
			found_item$ = true;
		}
	}
	if( !found_item$ )
	{
		SiegePos SpawnPos$;
		GoCloneReq cloneReq$ = MakeGoCloneReq( "tenstone_glb" );
		
		SpawnPos$ = target$.go.placement.position;
		cloneReq$.StartingPos	= SpawnPos$;
	    
		if( target$.Go.Hasmind )
		{
			if( AIQuery.FindSpotRelativeToSource( target$.Go, .25, .5, 2.0, target$.Go.Mind.TempPos1 ) )
	   		{
	   			cloneReq$.StartingPos = target$.Go.Mind.TempPos1;
	   		}
	   	}	
		cloneReq$.SnapToTerrain = true;
	    GoDb.SCloneGo( cloneReq$ );
	}
}

startup state STARTUP$
{
}

////////////////////////////////////////////////////////////////////////////////
//	init
event OnJobInitPointers$( Job job$ )
{
	m_Job$		= job$;
	m_Go$		= job$.Go;
	m_Mind$		= job$.Go.Mind;
	m_Body$		= job$.Go.Body;
}

event OnJobInit$( Job job$ )
{
	OnJobInitPointers$( job$ );

	m_Target$	= job$.GoalObject;

	SetState Talk$;
}

////////////////////////////////////////////////////////////////////////////////
//	blab blab away... pretend you're Lee on coffee
state Talk$
{
	transition
	{
		-> Exiting$:	OnWorldMessage( WE_REQ_TALK_END ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
		-> Exiting$:	OnWorldMessage( WE_ANIM_DONE ) =
		{
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
		}
	}

	event OnEnterState$
	{
		#only( game )
		[[
			if ( GameAuditor.GetDb.GetBool( "d_0x07200543" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "zconversation_directions" );
				GameAuditor.GetDb.SetBool( "d_0x07200543", false );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "ring_utraean", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren" );
			}
			else if ( Victory.IsQuestActive( "goto_grescal" ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_goto" );
			}
			else if( Victory.IsQuestCompleted( "quest_townstones" ) )
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_complete" );
				if ( !GameAuditor.GetDb.GetBool( "kavaren_gave_reward" ) )
				{
					GameAuditor.GetDb.SetBool( "kavaren_gave_reward", true );

					// Give the reward
					int i$ = 0;
					int iend$ = Player.GetHumanPlayerCount;
					
					while( i$ < iend$ )
					{
						SiegePos SpawnPos$;
						GoCloneReq cloneReq$ = MakeGoCloneReq( "he_fu_pl_smallwings_Kavaren" );
						
						SpawnPos$ = m_Target$.go.placement.position;
						cloneReq$.StartingPos	= SpawnPos$;
					    
						If( m_Target$.Go.Hasmind )
						{
							if( AIQuery.FindSpotRelativeToSource( m_Target$.Go, 0.25, 0.5, 2.0, m_Target$.Go.Mind.TempPos1 ) )
					   		{
								cloneReq$.StartingPos = m_Target$.Go.Mind.TempPos1;
					   		}
					   	}	
						cloneReq$.SnapToTerrain = true;
						GoDb.SCloneGo( cloneReq$ );
						i$ += 1;
					}
				}
			}
			else if (( Victory.GetQuestOrder( "quest_townstones" ) == 2) || ( Victory.GetQuestOrder( "quest_townstones" ) == 3))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_state2" );
				give_item$( m_Target$ );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_elddim_01", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_no_elddim" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_crystwind_01", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_no_crystwind" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_fallraen_01", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_no_fallraen" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_meren_01", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_no_meren" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_lang_01", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_no_lang" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_quillrabe_01", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_no_quillrabe" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_grescal_01", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_no_grescal" );
			}
			else if ( Goid.InValidGoid == UIPartyManager.DoesActivePartyHaveTemplate( "stone_glb_hiroth_01", m_Target$ ))
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_no_hiroth" );
			}
			else
			{
				m_Go$.GetConversation.RSSelectConversation( "conversation_kavaren_ring" );
			}
			if( m_Go$.Mind.ActorAutoFidgets )
			{
				StartFidgetIfRequired$();
			}
			m_Go$.GetConversation.RSActivateDialogue();
		]]
	}
}


////////////////////////////////////////////////////////////////////////////////
//	finish blabbing
state Exiting$
{
	event OnEnterState$
	{
		m_Job$.MarkForDeletion();
	}
}
